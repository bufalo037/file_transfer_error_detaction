===============================================================================
============================== Costea Mihai  ==================================
===============================================================================

===============================================================================

The exercise solution:

	I implemented a Stop and wait type protocol to solve the exercise. The 
presented idea is the transfer of files between 2 entities and the messages 
can be corrupted, in the sense that the information is transmitted in a wrong
way only in the sender -> receiver direction and the loss of packets is in the
sender <-> receiver direction. The sender puts a crc code along with the messege.Its 
validity can be verified by the receiver through the recalculation of the crc
on the message and by comparing the obtained results. If the packets are lost
or they don't make it in time and one of the entities receives a timeout on the
message receival, it will resend the last received message, making sure that the 
message previously sent by it reaches the other entity.
	In case the receiver receives a message, it sends a confirmation message to 
announce the sender about its current state.

===============================================================================

Used strategy:

I defined 3 structures to model the packets that I send on the network. Because
of the fact that the packets have variable sizes, I couldn't use a single
struct, because I have to dynamically allocate memory for the data field, and if 
I put a pointer that I allocate dynamically in the structure, it won't help
because when I copy the memory, I copy the pointer's address, not the content.

So, when I send a packet, I will always have to allocate the data separately, by 
the  header and footer, after I order them and I write them in the payload field
from the msg structure. I make the control sum on all the bits, except the bits
from the footer because that is pointless. I don't even check if MARK was
modified or not because it is not of interest (Maybe in a real case when I 
would've wanted to use the terminator).

Packets sending is done like this: the sender builds a packet and sends it 
to the receiver and starts the timer for response receival. If it doesn't 
receive a response, it will resend the packet and make this process 3 times. 
Afterwards, it will finish its execution. The analogous procedure is replicated
by the reciever for the responses to the packets sent by sender.
If a packet was sent with errors, the receiver will send a NAK message to let 
the sender know it did not receive the right information.
The packets will always update their own sequence numbers, except for the case
in which packets are not received. In this case, the sequence number remains the
same in order to let the entity that receives the message know which one of 
his message is being answered and if the message it received isn't actually
a message that had a big delay and didn't make in time. 

===============================================================================

Used structures: 

paket_header is a structure that contains all the metadata of the mini-kermit 
type paket, in the order presented in the exercise. 

paket_footer is a structure that contains all the information after the data 
field.

S_data is a structure that contains data that a type S packet must contain. 

===============================================================================
Used functions:

In ksender.c:

->read_data: a function that reads from a file and writes what it read inside a
buffer that it returns.

->transmitere_mesaj: a function that resends a message until it is successfully
sent and it receives an ACK confirmation or until it receives timeout 3 times 
trying to send the message.

->deliver_message: a function that sends a message and waits for its 
confirmation. If it doesn't receive anything, it repeats the process 3 times 
and then it returns error (-1).

===============================================================================

In kreceiver.c:

->set_type_msg: it analyzes the file that it received from the sender to figure 
out if it needs to answer with ACK or NAK.

-> get_file_name: it receives the message sent by the sender and extracts from 
its data field the file name sent by the sender that it prefixes with the "recv_" 
string.

->receive_messages: a function that receives messages from the sender, retains 
the last message sent and responds adequately to it depending on the 
circumstances in which it stands according to what I wrote above. I chose to 
declare a couple of statistical variables in order to not always give them as 
parameters. I found it less difficult to make the function recursive than to 
build a loop in the main that it keeps calling. Because the stack could be 
called too many times and it could be overloaded, I decided to optimize the
code on the queue.

-------------------------------------------------------------------------------

In lib.c:

I placed the functions that kreceiver and ksender use here. They are declared in
lib.h, which is included in it by default. 

->construct_data_S: a function that builds, according to the sent parameters,
the fields that might be modified in the data field of the S type packet from 
the mimi-kermit protocol. The rest of the information was initialized with the 
default value, according to the exercise.

->initialize_header: a function that initializes a header already allocated with
values that are given to it as parameters through lateral effect.

->init_msg: a function that pieces together all the information from a packet
by placing them in the payload field of a msg type message.

-------------------------------------------------------------------------------

===============================================================================
===============================================================================
